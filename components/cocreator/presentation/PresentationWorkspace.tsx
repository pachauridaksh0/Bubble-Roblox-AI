import React, { useMemo, useState } from 'react';
import Split from 'react-split-grid';
import { IdeWorkspaceProps } from '../shared/IdeWorkspace';
import { ChatView } from '../../chat/ChatView';
import { useWindowSize } from '../../../hooks/useWindowSize';

// Simple markdown-to-html for presentation slides
const renderSlideContent = (markdown: string) => {
    let html = markdown
        .replace(/^# (.*$)/gim, '<h1 class="text-4xl font-bold mb-4">$1</h1>')
        .replace(/^## (.*$)/gim, '<h2 class="text-2xl font-semibold mb-3">$1</h2>')
        .replace(/^\* (.*$)/gim, '<li class="ml-8 list-disc">$1</li>')
        .replace(/`([^`]+)`/g, '<code class="bg-gray-200 text-black px-1 rounded">$1</code>')
        .replace(/\n/g, '<br />');

    // Wrap list items in a ul
    if (html.includes('<li')) {
        html = `<ul>${html}</ul>`.replace(/<br \/>/g, '');
    }

    return { __html: html };
};


export const PresentationWorkspace: React.FC<IdeWorkspaceProps> = (props) => {
    const { messages } = props;
    const { width } = useWindowSize();
    const isMobile = width ? width < 1024 : false;
    const [selectedSlide, setSelectedSlide] = useState(0);

    const slides = useMemo(() => {
        const latestCodeMessage = [...messages].reverse().find(m => m.sender === 'ai' && m.code);
        if (!latestCodeMessage || !latestCodeMessage.code) return [];
        // Slides are separated by '---'
        const rawSlides = latestCodeMessage.code.split('---').map(s => s.trim()).filter(Boolean);
        if (rawSlides.length > 0) setSelectedSlide(0);
        return rawSlides;
    }, [messages]);
    
    const slideView = (
        <div className="h-full overflow-hidden flex bg-bg-primary">
            {slides.length > 0 ? (
                <>
                    <div className="w-48 flex-shrink-0 bg-bg-secondary p-2 overflow-y-auto border-r border-border-color">
                        <p className="text-xs font-semibold text-gray-400 p-2">SLIDES</p>
                        {slides.map((slide, index) => (
                            <div
                                key={index}
                                onClick={() => setSelectedSlide(index)}
                                className={`aspect-video p-1 border-2 rounded-md cursor-pointer mb-2 bg-bg-primary transition-colors ${selectedSlide === index ? 'border-primary-start' : 'border-transparent hover:border-white/20'}`}
                            >
                                <div
                                    className="w-full h-full bg-white text-black text-[3px] leading-tight overflow-hidden p-1 pointer-events-none"
                                    dangerouslySetInnerHTML={renderSlideContent(slide)}
                                />
                            </div>
                        ))}
                    </div>
                    <div className="flex-1 p-8 flex items-center justify-center bg-gray-900/50">
                        <div
                            className="aspect-video w-full max-w-5xl bg-white text-black p-8 rounded-lg shadow-2xl flex flex-col justify-center text-left"
                            dangerouslySetInnerHTML={renderSlideContent(slides[selectedSlide] || '')}
                        />
                    </div>
                </>
            ) : (
                <div className="flex items-center justify-center h-full w-full text-gray-500 text-center">
                    <p>Presentation slides generated by the AI will appear here.</p>
                </div>
            )}
        </div>
    );
    
    if (isMobile) {
        return <ChatView {...props} />;
    }

    return (
        <div className="h-full w-full bg-bg-primary text-white">
            {/* FIX: The 'render' prop is not valid for 'react-split-grid'. The render function should be passed as a child. */}
            <Split gridTemplateColumns="minmax(350px, 1fr) 8px 2fr" minSize={300} cursor="col-resize">
                {(split: any) => (
                     <div className="grid h-full w-full bg-bg-primary" {...split.getGridProps()}>
                        <div className="h-full bg-bg-secondary overflow-hidden">
                            <ChatView {...props} />
                        </div>
                        <div className="h-full bg-bg-tertiary cursor-col-resize" {...split.getGutterProps('column', 1)} />
                        <div className="h-full overflow-hidden">
                           {slideView}
                        </div>
                    </div>
                )}
            </Split>
        </div>
    );
};