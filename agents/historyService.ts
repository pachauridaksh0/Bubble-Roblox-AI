import { GoogleGenAI } from "@google/genai";
import { Message } from "../types";

export const summarizeOldHistory = async (
  messages: Message[],
  apiKey: string,
  keepLastN: number = 6
): Promise<Message[]> => {
  if (messages.length <= keepLastN) return messages;

  const oldMessages = messages.slice(0, -keepLastN);
  const recentMessages = messages.slice(-keepLastN);

  // Don't summarize if there's nothing to summarize
  if (oldMessages.length === 0) return messages;

  try {
    const ai = new GoogleGenAI({ apiKey });
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: `Summarize this conversation history in 3-4 sentences. Focus on key decisions, user preferences, and the main topics discussed. The summary will be used as context for an ongoing conversation, so keep it concise and informative.\n\nCONVERSATION HISTORY:\n${oldMessages.map(m => `${m.sender}: ${m.text}`).join('\n')}`
    });
    
    const summaryText = response.text;

    const summarizedMessage: Message = {
      // Use a unique but consistent ID for summary messages to prevent React key issues if re-summarization occurs
      id: `summary-${oldMessages[0].id}`, 
      chat_id: oldMessages[0].chat_id,
      project_id: oldMessages[0].project_id,
      sender: 'ai', // The summary is generated by the AI
      text: `[Previously, we discussed: ${summaryText}]`,
      created_at: oldMessages[0].created_at,
    };

    return [summarizedMessage, ...recentMessages];
  } catch (error) {
    console.error("Failed to summarize conversation history:", error);
    // If summarization fails, return the last N messages to prevent breaking the chat
    return recentMessages;
  }
};
